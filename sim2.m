clc;clear; %初始化各种矩阵vehNum = 45;S = 20; %融合区域长度L = 180;%融合区域前直线区域长度Vf_ms = 60/3.6;%终点速度m/stm2f = S/Vf_ms; %在merging zone中匀速行驶的长度；timeStep = 0.01;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%初始化燃油消耗计算%%%%%q0 = 0.1569;q1 = 2.45e-2;q2 = -7.415e-4;q3 = 5.975e-5;r0 = 0.07224;r1 = 9.681e-2;r2 = 1.075e-3;fuelRate = zeros(80/timeStep,vehNum);%80s-仿真总时长%%%%%%%%%%%%initTime = zeros(vehNum , 1);roadIndex = zeros(vehNum , 1);initSpeed_ms = zeros(vehNum , 1);mergingTime = zeros(vehNum ,1);finalTime = zeros(vehNum ,1 );%在mergingTime上加tm2ftravelTime =zeros(vehNum ,1);%%%%%位置、速度、加速度%PositionMat = zeros(80/timestep,vehNum);%%%%st = importdata('starttime.mat');initTime = st(:,1);roadIndex = st(:,3);%1 主路 2 辅路initSpeed_ms = st(:,4)/3.6;mergingTime(1) = roundn(initTime(1)+L/Vf_ms,-3);for idx = 2:1:45    %这个initiTime(idx)后面的参数，贼关键，用于限制最短通行时间    if mergingTime(idx-1) + tm2f < initTime(idx) + 0.9*L/Vf_ms %mergingTime(idx-1) + tm2f < initTime(idx) + 1.6*L/(Vf_ms+initSpeed_ms(idx))             mergingTime(idx) = roundn(initTime(idx) + L/Vf_ms,-3);    else        mergingTime(idx) = roundn( mergingTime(idx-1) + tm2f, -3);    endend;travelTime = mergingTime - initTime;const = zeros(4 , vehNum);%const maxtrix of all vehiclefor i=1:1:vehNumconst (:,i)= solveConst(0,L,initTime(i),mergingTime(i),initSpeed_ms(i),Vf_ms);%calculate constt1 = initTime(i):timeStep:mergingTime(i);%creat points from initial time to merging time% t2 = mergingTime(i) :timeStep : mergingTime(i) + tm2f ;%位置position = 1/6*const(1,i)*t1.^3+0.5*const(2,i)*t1.^2+const(3,i)*t1+const(4,i);%速度speed_ms = 0.5*const(1,i)*t1.^2+const(2,i)*t1+const(3,i);%控制输入u = const(1,i)*t1 +const(2,i);%fuel % thisVehFuelRate = q0 + q1 * speed_ms + q2 * speed_ms.^2 + q3 * speed_ms.^3+ u.*(r0 + r1 * speed_ms + r2 *speed_ms.^2);% fuelRate(round(initTime(i)*100):round(mergingTime(i)*100), i:i) = thisVehFuelRate'; %主路1辅路2if roadIndex(i) == 2    figure(1);        axis([0 85 0 200]);    xlabel('Time(s)');    ylabel('Position(m)');    %绘制时间位置关系 0-t1第一段 t1-t2第二段    figure(1);    plot(t1,position,'b','linewidth',1.5);hold on;%     plot(t2,L+Vf_ms*(t2-mergingTime(i)),'b','linewidth',1.5); hold on;       %绘制时间速度关系    figure(2);    axis([0 85 30 80]);    xlabel('Time(s)');    ylabel('Speed(km/h)');    plot(t1, speed_ms*3.6, 'b','linewidth',1.5);hold on;    %绘制时间速度关系    figure(3);%     subplot(2,1,2);    xlabel('Time(s)','FontSize',14);    ylabel('Acceleration(m/s^2)','FontSize',14);    plot(t1, u, 'b','linewidth',1.5);hold on;    else    figure(1);    plot(t1,position,'r--','linewidth',1.5);hold on;%     plot(t2,L+Vf_ms*(t2-mergingTime(i)),'r--','linewidth',1.5);hold on;        figure(2);    plot(t1, speed_ms*3.6, 'r--','linewidth',1.5);hold on;        figure(3);%     subplot(2,1,2);    plot(t1,u ,'r--','linewidth',1.5 );hold on;endendfigure(1);legend('Mering Vehcile','Mainline Vehicle');figure(2);legend('Mering Vehcile','Mainline Vehicle');figure(3);legend('Mering Vehcile','Mainline Vehicle');% figure(4);% plot(initSpeed_ms*3.6,'bx-','linewidth',1.5);% xlabel('Vehicle Identity','FontSize',14);% ylabel('Initial Speed(m/s)','FontSize',14);